
clock.elf:     file format elf32-littlenios2
clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x0000150c memsz 0x0000150c flags r-x
    LOAD off    0x0000252c vaddr 0x0000552c paddr 0x00005644 align 2**12
         filesz 0x00000118 memsz 0x00000118 flags rw-
    LOAD off    0x0000275c vaddr 0x0000575c paddr 0x0000575c align 2**12
         filesz 0x00000000 memsz 0x00000140 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001388  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00005508  00005508  00002508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000118  0000552c  00005644  0000252c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000140  0000575c  0000575c  0000275c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000589c  0000589c  00002644  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003d8  00000000  00000000  00002668  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000043a6  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000199a  00000000  00000000  00006de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c89  00000000  00000000  00008780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000550  00000000  00000000  0000a40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016c6  00000000  00000000  0000a95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015af  00000000  00000000  0000c022  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000d5d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f0  00000000  00000000  0000d618  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000ee8a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000ee8d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000ee99  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000ee9a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000ee9b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000eea6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000eeb1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0000eebc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0000eec7  2**0
                  CONTENTS, READONLY
 26 .jdi          000040e2  00000000  00000000  0000eef7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000684c7  00000000  00000000  00012fd9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
00005508 l    d  .rodata	00000000 .rodata
0000552c l    d  .rwdata	00000000 .rwdata
0000575c l    d  .bss	00000000 .bss
0000589c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../clock_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000041bc l     F .text	0000001c handle_timer_interrupts
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004a88 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000552c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00005798 g     O .bss	00000004 alt_instruction_exception_handler
000052dc g     F .text	0000002c alt_main
0000579c g     O .bss	00000100 alt_irq
00005644 g       *ABS*	00000000 __flash_rwdata_start
00004288 g     F .text	000000b0 display_time
00004a3c g     F .text	0000004c printf
00005308 g     F .text	00000038 alt_putstr
0000548c g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
0000576c g     O .bss	00000004 edge_capture
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005784 g     O .bss	00000004 errno
00005790 g     O .bss	00000004 alt_argv
0000d60c g       *ABS*	00000000 _gp
00005340 g     F .text	00000004 usleep
00005494 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00004a00 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000491c g     F .text	00000064 .hidden __udivsi3
00005618 g     O .rwdata	00000004 seg_u
00005168 g     F .text	00000094 alt_irq_register
00005630 g     O .rwdata	00000004 _global_impure_ptr
0000589c g       *ABS*	00000000 __bss_end
000041d8 g     F .text	000000b0 display
00005768 g     O .bss	00000004 minutos_reales
0000560c g     O .rwdata	00000004 botones
00005624 g     O .rwdata	00000004 min_d
00005788 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	00000060 alt_irq_handler
00005484 g     F .text	00000004 alt_dcache_flush_all
00005644 g       *ABS*	00000000 __ram_rwdata_end
00005344 g     F .text	00000060 write
0000552c g       *ABS*	00000000 __ram_rodata_end
0000563c g     O .rwdata	00000004 jtag_uart_0
0000562c g     O .rwdata	00000004 led
00004980 g     F .text	00000058 .hidden __umodsi3
0000589c g       *ABS*	00000000 end
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
000053c8 g     F .text	00000034 altera_avalon_jtag_uart_write
00004af4 g     F .text	0000052c ___vfprintf_internal_r
00005770 g     O .bss	00000004 numchigh
00005774 g     O .bss	00000004 numclks
00005778 g     O .bss	00000004 numclow
00004180 g     F .text	0000003c _start
00005610 g     O .rwdata	00000004 hora_u
000053c4 g     F .text	00000004 alt_sys_init
000049d8 g     F .text	00000028 .hidden __mulsi3
0000552c g       *ABS*	00000000 __ram_rwdata_start
00005508 g       *ABS*	00000000 __ram_rodata_start
0000575c g     O .bss	00000004 horas_alarm
000044e8 g     F .text	00000168 modoReloj
000053fc g     F .text	00000088 alt_busy_sleep
0000589c g       *ABS*	00000000 __alt_stack_base
00005760 g     O .bss	00000004 minutos_alarm
000043dc g     F .text	0000010c configurar_alarma
0000503c g     F .text	000000b8 __sfvwrite_small_dev
0000575c g       *ABS*	00000000 __bss_start
000047ec g     F .text	00000038 main
0000578c g     O .bss	00000004 alt_envp
00005640 g     O .rwdata	00000004 alt_errno
0000577c g     O .bss	00000004 seconds
00004824 g     F .text	00000084 .hidden __divsi3
00005508 g       *ABS*	00000000 __flash_rodata_start
000053a4 g     F .text	00000020 alt_irq_init
00005110 g     F .text	00000058 _write_r
00005614 g     O .rwdata	00000004 hora_d
00005634 g     O .rwdata	00000004 _impure_ptr
00005794 g     O .bss	00000004 alt_argc
00005620 g     O .rwdata	00000004 min_u
00004020 g       .exceptions	00000000 alt_irq_entry
0000561c g     O .rwdata	00000004 seg_d
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005628 g     O .rwdata	00000004 modo
00005644 g       *ABS*	00000000 _edata
0000589c g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
000048a8 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
0000400c g       .entry	00000000 _exit
00005780 g     O .bss	00000004 minutes
000050f4 g     F .text	0000001c strlen
00005488 g     F .text	00000004 alt_icache_flush_all
00004650 g     F .text	0000019c modoAlarma
00005638 g     O .rwdata	00000004 alt_priority_mask
00005020 g     F .text	0000001c __vfprintf_internal
00005764 g     O .bss	00000004 horas_reales
00004338 g     F .text	000000a4 configurar_reloj
000051fc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	8415e704 	addi	r16,r16,22428

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <alt_irq_handler+0x20>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a06317 	ldw	r2,-32372(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6b58314 	ori	gp,gp,54796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	1095d714 	ori	r2,r2,22364

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18d62714 	ori	r3,r3,22684

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	00051fc0 	call	51fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	00052dc0 	call	52dc <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <alt_after_alt_main>

000041bc <handle_timer_interrupts>:

int* botones = PUSH_BUTTONS_BASE;

static void handle_timer_interrupts(void* context, alt_u32 id)
{
	*led = 1;
    41bc:	d0a00817 	ldw	r2,-32736(gp)
    41c0:	00c00044 	movi	r3,1
    41c4:	10c00015 	stw	r3,0(r2)
	*(TimerControl)=6;
    41c8:	00c00184 	movi	r3,6
    41cc:	00a40114 	movui	r2,36868
    41d0:	10c0000d 	sth	r3,0(r2)
    41d4:	f800283a 	ret

000041d8 <display>:

}

void display(unsigned long* ptr , unsigned long number)
{
	if(number == 0)
    41d8:	2800021e 	bne	r5,zero,41e4 <display+0xc>
		* ptr= 64;
    41dc:	00801004 	movi	r2,64
    41e0:	00000306 	br	41f0 <display+0x18>
	if(number == 1)
    41e4:	00800044 	movi	r2,1
    41e8:	2880031e 	bne	r5,r2,41f8 <display+0x20>
		* ptr= 121;
    41ec:	00801e44 	movi	r2,121
    41f0:	20800015 	stw	r2,0(r4)
    41f4:	00000f06 	br	4234 <display+0x5c>
	if(number == 2)
    41f8:	00800084 	movi	r2,2
    41fc:	2880031e 	bne	r5,r2,420c <display+0x34>
		* ptr= 36;
    4200:	00800904 	movi	r2,36
    4204:	20800015 	stw	r2,0(r4)
    4208:	00000e06 	br	4244 <display+0x6c>
	if(number == 3)
    420c:	008000c4 	movi	r2,3
    4210:	2880031e 	bne	r5,r2,4220 <display+0x48>
		* ptr= 48;
    4214:	00800c04 	movi	r2,48
    4218:	20800015 	stw	r2,0(r4)
    421c:	00000d06 	br	4254 <display+0x7c>
	if(number == 4)
    4220:	00800104 	movi	r2,4
    4224:	2880031e 	bne	r5,r2,4234 <display+0x5c>
		* ptr= 25;
    4228:	00800644 	movi	r2,25
    422c:	20800015 	stw	r2,0(r4)
    4230:	00001006 	br	4274 <display+0x9c>
	if(number == 5)
    4234:	00800144 	movi	r2,5
    4238:	2880021e 	bne	r5,r2,4244 <display+0x6c>
		* ptr= 18;
    423c:	00800484 	movi	r2,18
    4240:	00000f06 	br	4280 <display+0xa8>
	if(number == 6)
    4244:	00800184 	movi	r2,6
    4248:	2880021e 	bne	r5,r2,4254 <display+0x7c>
		* ptr= 2;
    424c:	00800084 	movi	r2,2
    4250:	00000b06 	br	4280 <display+0xa8>
	if(number == 7)
    4254:	008001c4 	movi	r2,7
    4258:	2880021e 	bne	r5,r2,4264 <display+0x8c>
		* ptr= 120;
    425c:	00801e04 	movi	r2,120
    4260:	00000706 	br	4280 <display+0xa8>
	if(number == 8)
    4264:	00800204 	movi	r2,8
    4268:	2880021e 	bne	r5,r2,4274 <display+0x9c>
		* ptr= 0;
    426c:	20000015 	stw	zero,0(r4)
    4270:	f800283a 	ret
	if(number == 9)
    4274:	00800244 	movi	r2,9
    4278:	2880021e 	bne	r5,r2,4284 <display+0xac>
		* ptr=16;
    427c:	00800404 	movi	r2,16
    4280:	20800015 	stw	r2,0(r4)
    4284:	f800283a 	ret

00004288 <display_time>:





		seconds = 59-seconds;
    4288:	d0e05c17 	ldw	r3,-32400(gp)
		display(min_d, minutos_reales % 10);
    428c:	d1205717 	ldw	r4,-32420(gp)





		seconds = 59-seconds;
    4290:	00800ec4 	movi	r2,59
	*(TimerControl)=6;
}


void display_time()
{
    4294:	deffff04 	addi	sp,sp,-4





		seconds = 59-seconds;
    4298:	10c5c83a 	sub	r2,r2,r3
		display(min_d, minutos_reales % 10);
    429c:	01400284 	movi	r5,10
	*(TimerControl)=6;
}


void display_time()
{
    42a0:	dfc00015 	stw	ra,0(sp)





		seconds = 59-seconds;
    42a4:	d0a05c15 	stw	r2,-32400(gp)
		display(min_d, minutos_reales % 10);
    42a8:	00049800 	call	4980 <__umodsi3>
    42ac:	d1200617 	ldw	r4,-32744(gp)
    42b0:	100b883a 	mov	r5,r2
    42b4:	00041d80 	call	41d8 <display>
		display(min_u, minutos_reales / 10);
    42b8:	d1205717 	ldw	r4,-32420(gp)
    42bc:	01400284 	movi	r5,10
    42c0:	000491c0 	call	491c <__udivsi3>
    42c4:	d1200517 	ldw	r4,-32748(gp)
    42c8:	100b883a 	mov	r5,r2
    42cc:	00041d80 	call	41d8 <display>
		display(seg_u, seconds % 10);
    42d0:	d1205c17 	ldw	r4,-32400(gp)
    42d4:	01400284 	movi	r5,10
    42d8:	00049800 	call	4980 <__umodsi3>
    42dc:	d1200317 	ldw	r4,-32756(gp)
    42e0:	100b883a 	mov	r5,r2
    42e4:	00041d80 	call	41d8 <display>
		display(seg_d, seconds / 10);
    42e8:	d1205c17 	ldw	r4,-32400(gp)
    42ec:	01400284 	movi	r5,10
    42f0:	000491c0 	call	491c <__udivsi3>
    42f4:	d1200417 	ldw	r4,-32752(gp)
    42f8:	100b883a 	mov	r5,r2
    42fc:	00041d80 	call	41d8 <display>
		display(hora_u, horas_reales % 10);
    4300:	d1205617 	ldw	r4,-32424(gp)
    4304:	01400284 	movi	r5,10
    4308:	00049800 	call	4980 <__umodsi3>
    430c:	d1200117 	ldw	r4,-32764(gp)
    4310:	100b883a 	mov	r5,r2
    4314:	00041d80 	call	41d8 <display>
		display(hora_d, horas_reales / 10);
    4318:	d1205617 	ldw	r4,-32424(gp)
    431c:	01400284 	movi	r5,10
    4320:	000491c0 	call	491c <__udivsi3>
    4324:	d1200217 	ldw	r4,-32760(gp)
    4328:	100b883a 	mov	r5,r2
	//printf("Seconds_d %lu :  seconds_u %lu   \n", minutes,seconds);
	//display(u_seg, seconds % 10);
	//display(d_seg, seconds / 10);


}
    432c:	dfc00017 	ldw	ra,0(sp)
    4330:	dec00104 	addi	sp,sp,4
		display(min_d, minutos_reales % 10);
		display(min_u, minutos_reales / 10);
		display(seg_u, seconds % 10);
		display(seg_d, seconds / 10);
		display(hora_u, horas_reales % 10);
		display(hora_d, horas_reales / 10);
    4334:	00041d81 	jmpi	41d8 <display>

00004338 <configurar_reloj>:
}



void configurar_reloj()
{
    4338:	defffc04 	addi	sp,sp,-16
    433c:	dc800215 	stw	r18,8(sp)
    4340:	dc400115 	stw	r17,4(sp)
    4344:	dc000015 	stw	r16,0(sp)
    4348:	dfc00315 	stw	ra,12(sp)
	while(1)
	{
		if(*botones == 11)
    434c:	040002c4 	movi	r16,11
		{

			break;
		}
		if(*botones == 13)
    4350:	04400344 	movi	r17,13
			if(horas_reales == 24)
			{
				horas_reales = 0;
			}
		}
		if(*botones == 14)
    4354:	04800384 	movi	r18,14

void configurar_reloj()
{
	while(1)
	{
		if(*botones == 11)
    4358:	d0a00017 	ldw	r2,-32768(gp)
    435c:	10800017 	ldw	r2,0(r2)
    4360:	14001826 	beq	r2,r16,43c4 <configurar_reloj+0x8c>
		{

			break;
		}
		if(*botones == 13)
    4364:	1440061e 	bne	r2,r17,4380 <configurar_reloj+0x48>
		{
			horas_reales++;
    4368:	d0a05617 	ldw	r2,-32424(gp)
			if(horas_reales == 24)
    436c:	00c00604 	movi	r3,24

			break;
		}
		if(*botones == 13)
		{
			horas_reales++;
    4370:	10800044 	addi	r2,r2,1
			if(horas_reales == 24)
    4374:	10c0111e 	bne	r2,r3,43bc <configurar_reloj+0x84>
			{
				horas_reales = 0;
    4378:	d0205615 	stw	zero,-32424(gp)
    437c:	00000806 	br	43a0 <configurar_reloj+0x68>
			}
		}
		if(*botones == 14)
    4380:	1480071e 	bne	r2,r18,43a0 <configurar_reloj+0x68>
		{
			minutos_reales++;
    4384:	d0a05717 	ldw	r2,-32420(gp)
			if(minutos_reales == 60)
    4388:	00c00f04 	movi	r3,60
				horas_reales = 0;
			}
		}
		if(*botones == 14)
		{
			minutos_reales++;
    438c:	10800044 	addi	r2,r2,1
			if(minutos_reales == 60)
    4390:	10c00226 	beq	r2,r3,439c <configurar_reloj+0x64>
				horas_reales = 0;
			}
		}
		if(*botones == 14)
		{
			minutos_reales++;
    4394:	d0a05715 	stw	r2,-32420(gp)
    4398:	00000106 	br	43a0 <configurar_reloj+0x68>
			if(minutos_reales == 60)
			{
				minutos_reales = 0;
    439c:	d0205715 	stw	zero,-32420(gp)

			}
		}
		seconds = 59;
    43a0:	00800ec4 	movi	r2,59
    43a4:	d0a05c15 	stw	r2,-32400(gp)

		display_time();
    43a8:	00042880 	call	4288 <display_time>
		usleep(200000);
    43ac:	010000f4 	movhi	r4,3
    43b0:	21035004 	addi	r4,r4,3392
    43b4:	00053400 	call	5340 <usleep>

	}
    43b8:	003fe706 	br	4358 <configurar_reloj+0x20>

			break;
		}
		if(*botones == 13)
		{
			horas_reales++;
    43bc:	d0a05615 	stw	r2,-32424(gp)
    43c0:	003ff706 	br	43a0 <configurar_reloj+0x68>

		display_time();
		usleep(200000);

	}
}
    43c4:	dfc00317 	ldw	ra,12(sp)
    43c8:	dc800217 	ldw	r18,8(sp)
    43cc:	dc400117 	ldw	r17,4(sp)
    43d0:	dc000017 	ldw	r16,0(sp)
    43d4:	dec00404 	addi	sp,sp,16
    43d8:	f800283a 	ret

000043dc <configurar_alarma>:



void configurar_alarma()
{
    43dc:	defffc04 	addi	sp,sp,-16
    43e0:	dc800215 	stw	r18,8(sp)
    43e4:	dc400115 	stw	r17,4(sp)
    43e8:	dc000015 	stw	r16,0(sp)
    43ec:	dfc00315 	stw	ra,12(sp)
	while(1)
	{
		if(*botones == 11)
    43f0:	040002c4 	movi	r16,11
		{

			break;
		}
		if(*botones == 13)
    43f4:	04400344 	movi	r17,13
			if(horas_alarm == 24)
			{
				horas_alarm = 0;
			}
		}
		if(*botones == 14)
    43f8:	04800384 	movi	r18,14

void configurar_alarma()
{
	while(1)
	{
		if(*botones == 11)
    43fc:	d0a00017 	ldw	r2,-32768(gp)
    4400:	10800017 	ldw	r2,0(r2)
    4404:	14003226 	beq	r2,r16,44d0 <configurar_alarma+0xf4>
		{

			break;
		}
		if(*botones == 13)
    4408:	1440061e 	bne	r2,r17,4424 <configurar_alarma+0x48>
		{
			horas_alarm++;
    440c:	d0a05417 	ldw	r2,-32432(gp)
			if(horas_alarm == 24)
    4410:	00c00604 	movi	r3,24

			break;
		}
		if(*botones == 13)
		{
			horas_alarm++;
    4414:	10800044 	addi	r2,r2,1
			if(horas_alarm == 24)
    4418:	10c02b1e 	bne	r2,r3,44c8 <configurar_alarma+0xec>
			{
				horas_alarm = 0;
    441c:	d0205415 	stw	zero,-32432(gp)
    4420:	00000806 	br	4444 <configurar_alarma+0x68>
			}
		}
		if(*botones == 14)
    4424:	1480071e 	bne	r2,r18,4444 <configurar_alarma+0x68>
		{
			minutos_alarm++;
    4428:	d0a05517 	ldw	r2,-32428(gp)
			if(minutos_alarm == 60)
    442c:	00c00f04 	movi	r3,60
				horas_alarm = 0;
			}
		}
		if(*botones == 14)
		{
			minutos_alarm++;
    4430:	10800044 	addi	r2,r2,1
			if(minutos_alarm == 60)
    4434:	10c00226 	beq	r2,r3,4440 <configurar_alarma+0x64>
				horas_alarm = 0;
			}
		}
		if(*botones == 14)
		{
			minutos_alarm++;
    4438:	d0a05515 	stw	r2,-32428(gp)
    443c:	00000106 	br	4444 <configurar_alarma+0x68>
			if(minutos_alarm == 60)
			{
				minutos_alarm = 0;
    4440:	d0205515 	stw	zero,-32428(gp)

			}
		}

		display(min_d, minutos_alarm % 10);
    4444:	d1205517 	ldw	r4,-32428(gp)
    4448:	01400284 	movi	r5,10
    444c:	00049800 	call	4980 <__umodsi3>
    4450:	d1200617 	ldw	r4,-32744(gp)
    4454:	100b883a 	mov	r5,r2
    4458:	00041d80 	call	41d8 <display>
		display(min_u, minutos_alarm / 10);
    445c:	d1205517 	ldw	r4,-32428(gp)
    4460:	01400284 	movi	r5,10
    4464:	000491c0 	call	491c <__udivsi3>
    4468:	d1200517 	ldw	r4,-32748(gp)
    446c:	100b883a 	mov	r5,r2
    4470:	00041d80 	call	41d8 <display>
}

void display(unsigned long* ptr , unsigned long number)
{
	if(number == 0)
		* ptr= 64;
    4474:	d0e00317 	ldw	r3,-32756(gp)
    4478:	00801004 	movi	r2,64

		display(min_d, minutos_alarm % 10);
		display(min_u, minutos_alarm / 10);
		display(seg_u, 0);
		display(seg_d, 0);
		display(hora_u, horas_alarm % 10);
    447c:	01400284 	movi	r5,10
}

void display(unsigned long* ptr , unsigned long number)
{
	if(number == 0)
		* ptr= 64;
    4480:	18800015 	stw	r2,0(r3)
    4484:	d0e00417 	ldw	r3,-32752(gp)
    4488:	18800015 	stw	r2,0(r3)

		display(min_d, minutos_alarm % 10);
		display(min_u, minutos_alarm / 10);
		display(seg_u, 0);
		display(seg_d, 0);
		display(hora_u, horas_alarm % 10);
    448c:	d1205417 	ldw	r4,-32432(gp)
    4490:	00049800 	call	4980 <__umodsi3>
    4494:	d1200117 	ldw	r4,-32764(gp)
    4498:	100b883a 	mov	r5,r2
    449c:	00041d80 	call	41d8 <display>
		display(hora_d, horas_alarm / 10);
    44a0:	d1205417 	ldw	r4,-32432(gp)
    44a4:	01400284 	movi	r5,10
    44a8:	000491c0 	call	491c <__udivsi3>
    44ac:	d1200217 	ldw	r4,-32760(gp)
    44b0:	100b883a 	mov	r5,r2
    44b4:	00041d80 	call	41d8 <display>
		usleep(200000);
    44b8:	010000f4 	movhi	r4,3
    44bc:	21035004 	addi	r4,r4,3392
    44c0:	00053400 	call	5340 <usleep>

	}
    44c4:	003fcd06 	br	43fc <configurar_alarma+0x20>

			break;
		}
		if(*botones == 13)
		{
			horas_alarm++;
    44c8:	d0a05415 	stw	r2,-32432(gp)
    44cc:	003fdd06 	br	4444 <configurar_alarma+0x68>
		usleep(200000);

	}
	//minutos_alarm =0;
	//horas_alarm = 0;
}
    44d0:	dfc00317 	ldw	ra,12(sp)
    44d4:	dc800217 	ldw	r18,8(sp)
    44d8:	dc400117 	ldw	r17,4(sp)
    44dc:	dc000017 	ldw	r16,0(sp)
    44e0:	dec00404 	addi	sp,sp,16
    44e4:	f800283a 	ret

000044e8 <modoReloj>:
void modoReloj()
{

	alt_putstr("Hello from Nios II!\n");
    44e8:	01000034 	movhi	r4,0
	}
	//minutos_alarm =0;
	//horas_alarm = 0;
}
void modoReloj()
{
    44ec:	defffc04 	addi	sp,sp,-16

	alt_putstr("Hello from Nios II!\n");
    44f0:	21154204 	addi	r4,r4,21768
	}
	//minutos_alarm =0;
	//horas_alarm = 0;
}
void modoReloj()
{
    44f4:	dc800215 	stw	r18,8(sp)
    44f8:	dc400115 	stw	r17,4(sp)
    44fc:	dfc00315 	stw	ra,12(sp)
    4500:	dc000015 	stw	r16,0(sp)

	alt_putstr("Hello from Nios II!\n");
    4504:	00053080 	call	5308 <alt_putstr>
	   // Configure the timeout period to maximum
	*(TimerTimeoutL)=0x5e00;
    4508:	00d78004 	movi	r3,24064
    450c:	00a40214 	movui	r2,36872
    4510:	10c0000d 	sth	r3,0(r2)
	*(TimerTimeoutH)=0xb2d0;
    4514:	00ecb404 	movi	r3,-19760
    4518:	00a40314 	movui	r2,36876
    451c:	10c0000d 	sth	r3,0(r2)
	   // Configure timer to start counting and stop in cero
	*(TimerControl)=6;
    4520:	00a40114 	movui	r2,36868
    4524:	00c00184 	movi	r3,6
    4528:	10c0000d 	sth	r3,0(r2)
	    //*(TimerControl)=2;

	*led = 0;
    452c:	d0a00817 	ldw	r2,-32736(gp)
	while (*modo == 1)
    4530:	04800044 	movi	r18,1
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
    4534:	04640414 	movui	r17,36880
	*(TimerTimeoutH)=0xb2d0;
	   // Configure timer to start counting and stop in cero
	*(TimerControl)=6;
	    //*(TimerControl)=2;

	*led = 0;
    4538:	10000015 	stw	zero,0(r2)
	while (*modo == 1)
    453c:	d0a00717 	ldw	r2,-32740(gp)
    4540:	10800017 	ldw	r2,0(r2)
    4544:	14803c1e 	bne	r2,r18,4638 <modoReloj+0x150>
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
    4548:	8800000d 	sth	zero,0(r17)
	    numclow = *(TimerSnapshotL); //get low part
    454c:	8900000b 	ldhu	r4,0(r17)
	   numchigh = *(TimerSnapshotH); //get high part
    4550:	00e40514 	movui	r3,36884
	   numclks = numclow | (numchigh << 16); //assemble full number
	   seconds = numclks/50000000 ;
    4554:	0140bef4 	movhi	r5,763

	*led = 0;
	while (*modo == 1)
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
	    numclow = *(TimerSnapshotL); //get low part
    4558:	20bfffcc 	andi	r2,r4,65535
	   numchigh = *(TimerSnapshotH); //get high part
    455c:	1900000b 	ldhu	r4,0(r3)

	*led = 0;
	while (*modo == 1)
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
	    numclow = *(TimerSnapshotL); //get low part
    4560:	10a0001c 	xori	r2,r2,32768
    4564:	10a00004 	addi	r2,r2,-32768
	   numchigh = *(TimerSnapshotH); //get high part
    4568:	213fffcc 	andi	r4,r4,65535
    456c:	2120001c 	xori	r4,r4,32768
    4570:	21200004 	addi	r4,r4,-32768
    4574:	d1205915 	stw	r4,-32412(gp)
	   numclks = numclow | (numchigh << 16); //assemble full number
    4578:	2008943a 	slli	r4,r4,16
	   seconds = numclks/50000000 ;
    457c:	297c2004 	addi	r5,r5,-3968

	*led = 0;
	while (*modo == 1)
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
	    numclow = *(TimerSnapshotL); //get low part
    4580:	d0a05b15 	stw	r2,-32404(gp)
	   numchigh = *(TimerSnapshotH); //get high part
	   numclks = numclow | (numchigh << 16); //assemble full number
    4584:	2088b03a 	or	r4,r4,r2
    4588:	d1205a15 	stw	r4,-32408(gp)
	   seconds = numclks/50000000 ;
    458c:	000491c0 	call	491c <__udivsi3>
    4590:	d0a05c15 	stw	r2,-32400(gp)
	  // printf("Botones %d",*botones);
	   if(*botones == 7)
    4594:	d0a00017 	ldw	r2,-32768(gp)
    4598:	11400017 	ldw	r5,0(r2)
    459c:	008001c4 	movi	r2,7
    45a0:	2880041e 	bne	r5,r2,45b4 <modoReloj+0xcc>
	   {
		   printf("Botones %d",*botones);
    45a4:	01000034 	movhi	r4,0
    45a8:	21154804 	addi	r4,r4,21792
    45ac:	0004a3c0 	call	4a3c <printf>
		   configurar_reloj();
    45b0:	00043380 	call	4338 <configurar_reloj>
	   }

	   minutes = seconds/60;
    45b4:	d4205c17 	ldw	r16,-32400(gp)
    45b8:	01400f04 	movi	r5,60
    45bc:	8009883a 	mov	r4,r16
    45c0:	000491c0 	call	491c <__udivsi3>
	   seconds = seconds-minutes*60;
    45c4:	01400f04 	movi	r5,60
    45c8:	1009883a 	mov	r4,r2
	   {
		   printf("Botones %d",*botones);
		   configurar_reloj();
	   }

	   minutes = seconds/60;
    45cc:	d0a05d15 	stw	r2,-32396(gp)
	   seconds = seconds-minutes*60;
    45d0:	00049d80 	call	49d8 <__mulsi3>
    45d4:	8085c83a 	sub	r2,r16,r2
    45d8:	d0a05c15 	stw	r2,-32400(gp)
	   if(  seconds != 25 ) //corriendo, (RUN && !STOP)
    45dc:	00c00644 	movi	r3,25
    45e0:	10ffd626 	beq	r2,r3,453c <modoReloj+0x54>
	   {
		   if(*(TimerStatus) == 3)
    45e4:	00e40014 	movui	r3,36864
    45e8:	1880000b 	ldhu	r2,0(r3)
    45ec:	010000c4 	movi	r4,3
    45f0:	10bfffcc 	andi	r2,r2,65535
    45f4:	10a0001c 	xori	r2,r2,32768
    45f8:	10a00004 	addi	r2,r2,-32768
    45fc:	1100051e 	bne	r2,r4,4614 <modoReloj+0x12c>
		   {
			   *(TimerStatus) =  2;
    4600:	00800084 	movi	r2,2
    4604:	1880000d 	sth	r2,0(r3)
			   minutos_reales = minutos_reales+1 ;
    4608:	d0a05717 	ldw	r2,-32420(gp)
    460c:	10800044 	addi	r2,r2,1
    4610:	d0a05715 	stw	r2,-32420(gp)
		   }
		   if(minutos_reales == 60)
    4614:	d0e05717 	ldw	r3,-32420(gp)
    4618:	00800f04 	movi	r2,60
    461c:	1880041e 	bne	r3,r2,4630 <modoReloj+0x148>
		   {
			   if(minutos_reales == 1)
				   *(TimerControl)=5;
			   minutos_reales-=60;
			   horas_reales++;
    4620:	d0a05617 	ldw	r2,-32424(gp)
		   }
		   if(minutos_reales == 60)
		   {
			   if(minutos_reales == 1)
				   *(TimerControl)=5;
			   minutos_reales-=60;
    4624:	d0205715 	stw	zero,-32420(gp)
			   horas_reales++;
    4628:	10800044 	addi	r2,r2,1
    462c:	d0a05615 	stw	r2,-32424(gp)
		   }
	    	display_time();
    4630:	00042880 	call	4288 <display_time>
    4634:	003fc106 	br	453c <modoReloj+0x54>
	   }

	 }
	modoAlarma();

}
    4638:	dfc00317 	ldw	ra,12(sp)
    463c:	dc800217 	ldw	r18,8(sp)
    4640:	dc400117 	ldw	r17,4(sp)
    4644:	dc000017 	ldw	r16,0(sp)
    4648:	dec00404 	addi	sp,sp,16
		   }
	    	display_time();
	   }

	 }
	modoAlarma();
    464c:	00046501 	jmpi	4650 <modoAlarma>

00004650 <modoAlarma>:

void modoAlarma()
{
	void* edge_capture_ptr = (void*) &edge_capture;
				//register interrupt
	alt_irq_register( TIMER_0_IRQ,	edge_capture_ptr,handle_timer_interrupts );
    4650:	01800034 	movhi	r6,0

}


void modoAlarma()
{
    4654:	defffb04 	addi	sp,sp,-20
	void* edge_capture_ptr = (void*) &edge_capture;
				//register interrupt
	alt_irq_register( TIMER_0_IRQ,	edge_capture_ptr,handle_timer_interrupts );
    4658:	31906f04 	addi	r6,r6,16828
    465c:	d1605804 	addi	r5,gp,-32416
    4660:	01000044 	movi	r4,1

}


void modoAlarma()
{
    4664:	dcc00315 	stw	r19,12(sp)
    4668:	dc800215 	stw	r18,8(sp)
    466c:	dc400115 	stw	r17,4(sp)
    4670:	dfc00415 	stw	ra,16(sp)
    4674:	dc000015 	stw	r16,0(sp)
	void* edge_capture_ptr = (void*) &edge_capture;
				//register interrupt
	alt_irq_register( TIMER_0_IRQ,	edge_capture_ptr,handle_timer_interrupts );
    4678:	00051680 	call	5168 <alt_irq_register>


		   // Configure the timeout period to maximum
	*(TimerTimeoutL)=0x5e00;
    467c:	00d78004 	movi	r3,24064
    4680:	00a40214 	movui	r2,36872
    4684:	10c0000d 	sth	r3,0(r2)
	*(TimerTimeoutH)=0xb2d0;
    4688:	00ecb404 	movi	r3,-19760
    468c:	00a40314 	movui	r2,36876
    4690:	10c0000d 	sth	r3,0(r2)
		   // Configure timer to start counting and stop in cero
	*(TimerControl)=6;
    4694:	00a40114 	movui	r2,36868
    4698:	00c00184 	movi	r3,6
    469c:	10c0000d 	sth	r3,0(r2)
		    //*(TimerControl)=2;

	*led = 0;
    46a0:	d0a00817 	ldw	r2,-32736(gp)
	while (*modo == 0)
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
    46a4:	04640414 	movui	r17,36880
	    numclow = *(TimerSnapshotL); //get low part
	   numchigh = *(TimerSnapshotH); //get high part
    46a8:	04a40514 	movui	r18,36884
	*(TimerTimeoutH)=0xb2d0;
		   // Configure timer to start counting and stop in cero
	*(TimerControl)=6;
		    //*(TimerControl)=2;

	*led = 0;
    46ac:	10000015 	stw	zero,0(r2)
	    numclow = *(TimerSnapshotL); //get low part
	   numchigh = *(TimerSnapshotH); //get high part
	   numclks = numclow | (numchigh << 16); //assemble full number
	   seconds = numclks/50000000 ;
		  // printf("Botones %d",*botones);
	   if(*botones == 7)
    46b0:	04c001c4 	movi	r19,7
		   // Configure timer to start counting and stop in cero
	*(TimerControl)=6;
		    //*(TimerControl)=2;

	*led = 0;
	while (*modo == 0)
    46b4:	d0a00717 	ldw	r2,-32740(gp)
    46b8:	10800017 	ldw	r2,0(r2)
    46bc:	1000441e 	bne	r2,zero,47d0 <modoAlarma+0x180>
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
    46c0:	8800000d 	sth	zero,0(r17)
	    numclow = *(TimerSnapshotL); //get low part
    46c4:	8900000b 	ldhu	r4,0(r17)
	   numchigh = *(TimerSnapshotH); //get high part
	   numclks = numclow | (numchigh << 16); //assemble full number
	   seconds = numclks/50000000 ;
    46c8:	0140bef4 	movhi	r5,763
    46cc:	297c2004 	addi	r5,r5,-3968

	*led = 0;
	while (*modo == 0)
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
	    numclow = *(TimerSnapshotL); //get low part
    46d0:	20bfffcc 	andi	r2,r4,65535
	   numchigh = *(TimerSnapshotH); //get high part
    46d4:	9100000b 	ldhu	r4,0(r18)

	*led = 0;
	while (*modo == 0)
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
	    numclow = *(TimerSnapshotL); //get low part
    46d8:	10a0001c 	xori	r2,r2,32768
    46dc:	10a00004 	addi	r2,r2,-32768
	   numchigh = *(TimerSnapshotH); //get high part
    46e0:	213fffcc 	andi	r4,r4,65535
    46e4:	2120001c 	xori	r4,r4,32768
    46e8:	21200004 	addi	r4,r4,-32768
    46ec:	d1205915 	stw	r4,-32412(gp)
	   numclks = numclow | (numchigh << 16); //assemble full number
    46f0:	2008943a 	slli	r4,r4,16

	*led = 0;
	while (*modo == 0)
	{
	   *(TimerSnapshotL)=0; //write to timer to get snapshot
	    numclow = *(TimerSnapshotL); //get low part
    46f4:	d0a05b15 	stw	r2,-32404(gp)
	   numchigh = *(TimerSnapshotH); //get high part
	   numclks = numclow | (numchigh << 16); //assemble full number
    46f8:	2088b03a 	or	r4,r4,r2
    46fc:	d1205a15 	stw	r4,-32408(gp)
	   seconds = numclks/50000000 ;
    4700:	000491c0 	call	491c <__udivsi3>
    4704:	d0a05c15 	stw	r2,-32400(gp)
		  // printf("Botones %d",*botones);
	   if(*botones == 7)
    4708:	d0a00017 	ldw	r2,-32768(gp)
    470c:	10800017 	ldw	r2,0(r2)
    4710:	14c0011e 	bne	r2,r19,4718 <modoAlarma+0xc8>
	   {

		   configurar_alarma();
    4714:	00043dc0 	call	43dc <configurar_alarma>
	   }
	   if(seconds == 45)
    4718:	d4205c17 	ldw	r16,-32400(gp)
    471c:	00800b44 	movi	r2,45
    4720:	8080021e 	bne	r16,r2,472c <modoAlarma+0xdc>
	   {
	   	   *led = 0;
    4724:	d0a00817 	ldw	r2,-32736(gp)
    4728:	10000015 	stw	zero,0(r2)
	   }


		  minutes = seconds/60;
    472c:	01400f04 	movi	r5,60
    4730:	8009883a 	mov	r4,r16
    4734:	000491c0 	call	491c <__udivsi3>
		  seconds = seconds-minutes*60;
    4738:	01400f04 	movi	r5,60
    473c:	1009883a 	mov	r4,r2
	   {
	   	   *led = 0;
	   }


		  minutes = seconds/60;
    4740:	d0a05d15 	stw	r2,-32396(gp)
		  seconds = seconds-minutes*60;
    4744:	00049d80 	call	49d8 <__mulsi3>
    4748:	8085c83a 	sub	r2,r16,r2
    474c:	d0a05c15 	stw	r2,-32400(gp)
		 if(  seconds != 25 ) //corriendo, (RUN && !STOP)
    4750:	00c00644 	movi	r3,25
    4754:	10ffd726 	beq	r2,r3,46b4 <modoAlarma+0x64>
		   {
			   if(*(TimerStatus) == 3)
    4758:	00a40014 	movui	r2,36864
    475c:	1080000b 	ldhu	r2,0(r2)
    4760:	00c000c4 	movi	r3,3
    4764:	10bfffcc 	andi	r2,r2,65535
    4768:	10a0001c 	xori	r2,r2,32768
    476c:	10a00004 	addi	r2,r2,-32768
    4770:	10c00e1e 	bne	r2,r3,47ac <modoAlarma+0x15c>
			   {

				   minutos_reales = minutos_reales+1 ;
    4774:	d0a05717 	ldw	r2,-32420(gp)

				   if((minutos_reales == minutos_alarm) && (horas_reales == horas_alarm))
    4778:	d0e05517 	ldw	r3,-32428(gp)
		 if(  seconds != 25 ) //corriendo, (RUN && !STOP)
		   {
			   if(*(TimerStatus) == 3)
			   {

				   minutos_reales = minutos_reales+1 ;
    477c:	10800044 	addi	r2,r2,1
    4780:	d0a05715 	stw	r2,-32420(gp)

				   if((minutos_reales == minutos_alarm) && (horas_reales == horas_alarm))
    4784:	10c0061e 	bne	r2,r3,47a0 <modoAlarma+0x150>
    4788:	d0a05417 	ldw	r2,-32432(gp)
    478c:	d0e05617 	ldw	r3,-32424(gp)
    4790:	1880031e 	bne	r3,r2,47a0 <modoAlarma+0x150>
				   {

					   *(TimerControl)=5;
    4794:	00c00144 	movi	r3,5
    4798:	00a40114 	movui	r2,36868
    479c:	10c0000d 	sth	r3,0(r2)
				   }
				   *(TimerStatus) =  2;
    47a0:	00c00084 	movi	r3,2
    47a4:	00a40014 	movui	r2,36864
    47a8:	10c0000d 	sth	r3,0(r2)

			   }
			   if(minutos_reales == 60)
    47ac:	d0e05717 	ldw	r3,-32420(gp)
    47b0:	00800f04 	movi	r2,60
    47b4:	1880041e 	bne	r3,r2,47c8 <modoAlarma+0x178>
			   {
				   if(minutos_reales == 1)
					   *(TimerControl)=5;
				   minutos_reales-=60;
				   horas_reales++;
    47b8:	d0a05617 	ldw	r2,-32424(gp)
			   }
			   if(minutos_reales == 60)
			   {
				   if(minutos_reales == 1)
					   *(TimerControl)=5;
				   minutos_reales-=60;
    47bc:	d0205715 	stw	zero,-32420(gp)
				   horas_reales++;
    47c0:	10800044 	addi	r2,r2,1
    47c4:	d0a05615 	stw	r2,-32424(gp)
			   }

		    	display_time();
    47c8:	00042880 	call	4288 <display_time>
    47cc:	003fb906 	br	46b4 <modoAlarma+0x64>

		 }
	modoReloj();


}
    47d0:	dfc00417 	ldw	ra,16(sp)
    47d4:	dcc00317 	ldw	r19,12(sp)
    47d8:	dc800217 	ldw	r18,8(sp)
    47dc:	dc400117 	ldw	r17,4(sp)
    47e0:	dc000017 	ldw	r16,0(sp)
    47e4:	dec00504 	addi	sp,sp,20
		    	display_time();

		   }

		 }
	modoReloj();
    47e8:	00044e81 	jmpi	44e8 <modoReloj>

000047ec <main>:

int main()
{
	minutos_reales = 0;
	horas_reales = 0;
	if(*modo == 0)
    47ec:	d0a00717 	ldw	r2,-32740(gp)
}



int main()
{
    47f0:	deffff04 	addi	sp,sp,-4
    47f4:	dfc00015 	stw	ra,0(sp)
	minutos_reales = 0;
	horas_reales = 0;
	if(*modo == 0)
    47f8:	10800017 	ldw	r2,0(r2)



int main()
{
	minutos_reales = 0;
    47fc:	d0205715 	stw	zero,-32420(gp)
	horas_reales = 0;
    4800:	d0205615 	stw	zero,-32424(gp)
	if(*modo == 0)
    4804:	1000021e 	bne	r2,zero,4810 <main+0x24>
	{
		modoAlarma();
    4808:	00046500 	call	4650 <modoAlarma>
    480c:	00000106 	br	4814 <main+0x28>
	}
	else
		modoReloj();
    4810:	00044e80 	call	44e8 <modoReloj>

  return 0;
}
    4814:	0005883a 	mov	r2,zero
    4818:	dfc00017 	ldw	ra,0(sp)
    481c:	dec00104 	addi	sp,sp,4
    4820:	f800283a 	ret

00004824 <__divsi3>:
    4824:	20001b16 	blt	r4,zero,4894 <__divsi3+0x70>
    4828:	000f883a 	mov	r7,zero
    482c:	28001616 	blt	r5,zero,4888 <__divsi3+0x64>
    4830:	200d883a 	mov	r6,r4
    4834:	29001a2e 	bgeu	r5,r4,48a0 <__divsi3+0x7c>
    4838:	00800804 	movi	r2,32
    483c:	00c00044 	movi	r3,1
    4840:	00000106 	br	4848 <__divsi3+0x24>
    4844:	10000d26 	beq	r2,zero,487c <__divsi3+0x58>
    4848:	294b883a 	add	r5,r5,r5
    484c:	10bfffc4 	addi	r2,r2,-1
    4850:	18c7883a 	add	r3,r3,r3
    4854:	293ffb36 	bltu	r5,r4,4844 <__divsi3+0x20>
    4858:	0005883a 	mov	r2,zero
    485c:	18000726 	beq	r3,zero,487c <__divsi3+0x58>
    4860:	0005883a 	mov	r2,zero
    4864:	31400236 	bltu	r6,r5,4870 <__divsi3+0x4c>
    4868:	314dc83a 	sub	r6,r6,r5
    486c:	10c4b03a 	or	r2,r2,r3
    4870:	1806d07a 	srli	r3,r3,1
    4874:	280ad07a 	srli	r5,r5,1
    4878:	183ffa1e 	bne	r3,zero,4864 <__divsi3+0x40>
    487c:	38000126 	beq	r7,zero,4884 <__divsi3+0x60>
    4880:	0085c83a 	sub	r2,zero,r2
    4884:	f800283a 	ret
    4888:	014bc83a 	sub	r5,zero,r5
    488c:	39c0005c 	xori	r7,r7,1
    4890:	003fe706 	br	4830 <__divsi3+0xc>
    4894:	0109c83a 	sub	r4,zero,r4
    4898:	01c00044 	movi	r7,1
    489c:	003fe306 	br	482c <__divsi3+0x8>
    48a0:	00c00044 	movi	r3,1
    48a4:	003fee06 	br	4860 <__divsi3+0x3c>

000048a8 <__modsi3>:
    48a8:	20001716 	blt	r4,zero,4908 <__modsi3+0x60>
    48ac:	000f883a 	mov	r7,zero
    48b0:	2005883a 	mov	r2,r4
    48b4:	28001216 	blt	r5,zero,4900 <__modsi3+0x58>
    48b8:	2900162e 	bgeu	r5,r4,4914 <__modsi3+0x6c>
    48bc:	01800804 	movi	r6,32
    48c0:	00c00044 	movi	r3,1
    48c4:	00000106 	br	48cc <__modsi3+0x24>
    48c8:	30000a26 	beq	r6,zero,48f4 <__modsi3+0x4c>
    48cc:	294b883a 	add	r5,r5,r5
    48d0:	31bfffc4 	addi	r6,r6,-1
    48d4:	18c7883a 	add	r3,r3,r3
    48d8:	293ffb36 	bltu	r5,r4,48c8 <__modsi3+0x20>
    48dc:	18000526 	beq	r3,zero,48f4 <__modsi3+0x4c>
    48e0:	1806d07a 	srli	r3,r3,1
    48e4:	11400136 	bltu	r2,r5,48ec <__modsi3+0x44>
    48e8:	1145c83a 	sub	r2,r2,r5
    48ec:	280ad07a 	srli	r5,r5,1
    48f0:	183ffb1e 	bne	r3,zero,48e0 <__modsi3+0x38>
    48f4:	38000126 	beq	r7,zero,48fc <__modsi3+0x54>
    48f8:	0085c83a 	sub	r2,zero,r2
    48fc:	f800283a 	ret
    4900:	014bc83a 	sub	r5,zero,r5
    4904:	003fec06 	br	48b8 <__modsi3+0x10>
    4908:	0109c83a 	sub	r4,zero,r4
    490c:	01c00044 	movi	r7,1
    4910:	003fe706 	br	48b0 <__modsi3+0x8>
    4914:	00c00044 	movi	r3,1
    4918:	003ff106 	br	48e0 <__modsi3+0x38>

0000491c <__udivsi3>:
    491c:	200d883a 	mov	r6,r4
    4920:	2900152e 	bgeu	r5,r4,4978 <__udivsi3+0x5c>
    4924:	28001416 	blt	r5,zero,4978 <__udivsi3+0x5c>
    4928:	00800804 	movi	r2,32
    492c:	00c00044 	movi	r3,1
    4930:	00000206 	br	493c <__udivsi3+0x20>
    4934:	10000e26 	beq	r2,zero,4970 <__udivsi3+0x54>
    4938:	28000516 	blt	r5,zero,4950 <__udivsi3+0x34>
    493c:	294b883a 	add	r5,r5,r5
    4940:	10bfffc4 	addi	r2,r2,-1
    4944:	18c7883a 	add	r3,r3,r3
    4948:	293ffa36 	bltu	r5,r4,4934 <__udivsi3+0x18>
    494c:	18000826 	beq	r3,zero,4970 <__udivsi3+0x54>
    4950:	0005883a 	mov	r2,zero
    4954:	31400236 	bltu	r6,r5,4960 <__udivsi3+0x44>
    4958:	314dc83a 	sub	r6,r6,r5
    495c:	10c4b03a 	or	r2,r2,r3
    4960:	1806d07a 	srli	r3,r3,1
    4964:	280ad07a 	srli	r5,r5,1
    4968:	183ffa1e 	bne	r3,zero,4954 <__udivsi3+0x38>
    496c:	f800283a 	ret
    4970:	0005883a 	mov	r2,zero
    4974:	f800283a 	ret
    4978:	00c00044 	movi	r3,1
    497c:	003ff406 	br	4950 <__udivsi3+0x34>

00004980 <__umodsi3>:
    4980:	2005883a 	mov	r2,r4
    4984:	2900122e 	bgeu	r5,r4,49d0 <__umodsi3+0x50>
    4988:	28001116 	blt	r5,zero,49d0 <__umodsi3+0x50>
    498c:	01800804 	movi	r6,32
    4990:	00c00044 	movi	r3,1
    4994:	00000206 	br	49a0 <__umodsi3+0x20>
    4998:	30000c26 	beq	r6,zero,49cc <__umodsi3+0x4c>
    499c:	28000516 	blt	r5,zero,49b4 <__umodsi3+0x34>
    49a0:	294b883a 	add	r5,r5,r5
    49a4:	31bfffc4 	addi	r6,r6,-1
    49a8:	18c7883a 	add	r3,r3,r3
    49ac:	293ffa36 	bltu	r5,r4,4998 <__umodsi3+0x18>
    49b0:	18000626 	beq	r3,zero,49cc <__umodsi3+0x4c>
    49b4:	1806d07a 	srli	r3,r3,1
    49b8:	11400136 	bltu	r2,r5,49c0 <__umodsi3+0x40>
    49bc:	1145c83a 	sub	r2,r2,r5
    49c0:	280ad07a 	srli	r5,r5,1
    49c4:	183ffb1e 	bne	r3,zero,49b4 <__umodsi3+0x34>
    49c8:	f800283a 	ret
    49cc:	f800283a 	ret
    49d0:	00c00044 	movi	r3,1
    49d4:	003ff706 	br	49b4 <__umodsi3+0x34>

000049d8 <__mulsi3>:
    49d8:	0005883a 	mov	r2,zero
    49dc:	20000726 	beq	r4,zero,49fc <__mulsi3+0x24>
    49e0:	20c0004c 	andi	r3,r4,1
    49e4:	2008d07a 	srli	r4,r4,1
    49e8:	18000126 	beq	r3,zero,49f0 <__mulsi3+0x18>
    49ec:	1145883a 	add	r2,r2,r5
    49f0:	294b883a 	add	r5,r5,r5
    49f4:	203ffa1e 	bne	r4,zero,49e0 <__mulsi3+0x8>
    49f8:	f800283a 	ret
    49fc:	f800283a 	ret

00004a00 <_printf_r>:
    4a00:	defffd04 	addi	sp,sp,-12
    4a04:	dfc00015 	stw	ra,0(sp)
    4a08:	d9800115 	stw	r6,4(sp)
    4a0c:	d9c00215 	stw	r7,8(sp)
    4a10:	20c00217 	ldw	r3,8(r4)
    4a14:	01800034 	movhi	r6,0
    4a18:	31940f04 	addi	r6,r6,20540
    4a1c:	19800115 	stw	r6,4(r3)
    4a20:	280d883a 	mov	r6,r5
    4a24:	21400217 	ldw	r5,8(r4)
    4a28:	d9c00104 	addi	r7,sp,4
    4a2c:	0004af40 	call	4af4 <___vfprintf_internal_r>
    4a30:	dfc00017 	ldw	ra,0(sp)
    4a34:	dec00304 	addi	sp,sp,12
    4a38:	f800283a 	ret

00004a3c <printf>:
    4a3c:	defffc04 	addi	sp,sp,-16
    4a40:	dfc00015 	stw	ra,0(sp)
    4a44:	d9400115 	stw	r5,4(sp)
    4a48:	d9800215 	stw	r6,8(sp)
    4a4c:	d9c00315 	stw	r7,12(sp)
    4a50:	00800034 	movhi	r2,0
    4a54:	10958d04 	addi	r2,r2,22068
    4a58:	10800017 	ldw	r2,0(r2)
    4a5c:	01400034 	movhi	r5,0
    4a60:	29540f04 	addi	r5,r5,20540
    4a64:	10c00217 	ldw	r3,8(r2)
    4a68:	d9800104 	addi	r6,sp,4
    4a6c:	19400115 	stw	r5,4(r3)
    4a70:	200b883a 	mov	r5,r4
    4a74:	11000217 	ldw	r4,8(r2)
    4a78:	00050200 	call	5020 <__vfprintf_internal>
    4a7c:	dfc00017 	ldw	ra,0(sp)
    4a80:	dec00404 	addi	sp,sp,16
    4a84:	f800283a 	ret

00004a88 <print_repeat>:
    4a88:	defffb04 	addi	sp,sp,-20
    4a8c:	dc800315 	stw	r18,12(sp)
    4a90:	dc400215 	stw	r17,8(sp)
    4a94:	dc000115 	stw	r16,4(sp)
    4a98:	dfc00415 	stw	ra,16(sp)
    4a9c:	2025883a 	mov	r18,r4
    4aa0:	2823883a 	mov	r17,r5
    4aa4:	d9800005 	stb	r6,0(sp)
    4aa8:	3821883a 	mov	r16,r7
    4aac:	04000a0e 	bge	zero,r16,4ad8 <print_repeat+0x50>
    4ab0:	88800117 	ldw	r2,4(r17)
    4ab4:	01c00044 	movi	r7,1
    4ab8:	d80d883a 	mov	r6,sp
    4abc:	880b883a 	mov	r5,r17
    4ac0:	9009883a 	mov	r4,r18
    4ac4:	103ee83a 	callr	r2
    4ac8:	843fffc4 	addi	r16,r16,-1
    4acc:	103ff726 	beq	r2,zero,4aac <print_repeat+0x24>
    4ad0:	00bfffc4 	movi	r2,-1
    4ad4:	00000106 	br	4adc <print_repeat+0x54>
    4ad8:	0005883a 	mov	r2,zero
    4adc:	dfc00417 	ldw	ra,16(sp)
    4ae0:	dc800317 	ldw	r18,12(sp)
    4ae4:	dc400217 	ldw	r17,8(sp)
    4ae8:	dc000117 	ldw	r16,4(sp)
    4aec:	dec00504 	addi	sp,sp,20
    4af0:	f800283a 	ret

00004af4 <___vfprintf_internal_r>:
    4af4:	deffe504 	addi	sp,sp,-108
    4af8:	d8c00804 	addi	r3,sp,32
    4afc:	ddc01815 	stw	r23,96(sp)
    4b00:	dd801715 	stw	r22,92(sp)
    4b04:	dd401615 	stw	r21,88(sp)
    4b08:	dd001515 	stw	r20,84(sp)
    4b0c:	dcc01415 	stw	r19,80(sp)
    4b10:	dc801315 	stw	r18,76(sp)
    4b14:	dc401215 	stw	r17,72(sp)
    4b18:	dc001115 	stw	r16,68(sp)
    4b1c:	dfc01a15 	stw	ra,104(sp)
    4b20:	df001915 	stw	fp,100(sp)
    4b24:	2029883a 	mov	r20,r4
    4b28:	2823883a 	mov	r17,r5
    4b2c:	382d883a 	mov	r22,r7
    4b30:	d9800f15 	stw	r6,60(sp)
    4b34:	0021883a 	mov	r16,zero
    4b38:	d8000e15 	stw	zero,56(sp)
    4b3c:	d8000a15 	stw	zero,40(sp)
    4b40:	002b883a 	mov	r21,zero
    4b44:	0027883a 	mov	r19,zero
    4b48:	0025883a 	mov	r18,zero
    4b4c:	d8000c15 	stw	zero,48(sp)
    4b50:	d8000b15 	stw	zero,44(sp)
    4b54:	002f883a 	mov	r23,zero
    4b58:	d8c00915 	stw	r3,36(sp)
    4b5c:	d8c00f17 	ldw	r3,60(sp)
    4b60:	19000003 	ldbu	r4,0(r3)
    4b64:	20803fcc 	andi	r2,r4,255
    4b68:	1080201c 	xori	r2,r2,128
    4b6c:	10bfe004 	addi	r2,r2,-128
    4b70:	10011e26 	beq	r2,zero,4fec <___vfprintf_internal_r+0x4f8>
    4b74:	00c00044 	movi	r3,1
    4b78:	b8c01426 	beq	r23,r3,4bcc <___vfprintf_internal_r+0xd8>
    4b7c:	1dc00216 	blt	r3,r23,4b88 <___vfprintf_internal_r+0x94>
    4b80:	b8000626 	beq	r23,zero,4b9c <___vfprintf_internal_r+0xa8>
    4b84:	00011506 	br	4fdc <___vfprintf_internal_r+0x4e8>
    4b88:	01400084 	movi	r5,2
    4b8c:	b9401d26 	beq	r23,r5,4c04 <___vfprintf_internal_r+0x110>
    4b90:	014000c4 	movi	r5,3
    4b94:	b9402b26 	beq	r23,r5,4c44 <___vfprintf_internal_r+0x150>
    4b98:	00011006 	br	4fdc <___vfprintf_internal_r+0x4e8>
    4b9c:	01400944 	movi	r5,37
    4ba0:	1140fc26 	beq	r2,r5,4f94 <___vfprintf_internal_r+0x4a0>
    4ba4:	88800117 	ldw	r2,4(r17)
    4ba8:	d9000005 	stb	r4,0(sp)
    4bac:	01c00044 	movi	r7,1
    4bb0:	d80d883a 	mov	r6,sp
    4bb4:	880b883a 	mov	r5,r17
    4bb8:	a009883a 	mov	r4,r20
    4bbc:	103ee83a 	callr	r2
    4bc0:	1000d81e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4bc4:	84000044 	addi	r16,r16,1
    4bc8:	00010406 	br	4fdc <___vfprintf_internal_r+0x4e8>
    4bcc:	01400c04 	movi	r5,48
    4bd0:	1140fa26 	beq	r2,r5,4fbc <___vfprintf_internal_r+0x4c8>
    4bd4:	01400944 	movi	r5,37
    4bd8:	11400a1e 	bne	r2,r5,4c04 <___vfprintf_internal_r+0x110>
    4bdc:	d8800005 	stb	r2,0(sp)
    4be0:	88800117 	ldw	r2,4(r17)
    4be4:	b80f883a 	mov	r7,r23
    4be8:	d80d883a 	mov	r6,sp
    4bec:	880b883a 	mov	r5,r17
    4bf0:	a009883a 	mov	r4,r20
    4bf4:	103ee83a 	callr	r2
    4bf8:	1000ca1e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4bfc:	84000044 	addi	r16,r16,1
    4c00:	0000f506 	br	4fd8 <___vfprintf_internal_r+0x4e4>
    4c04:	25fff404 	addi	r23,r4,-48
    4c08:	bdc03fcc 	andi	r23,r23,255
    4c0c:	00c00244 	movi	r3,9
    4c10:	1dc00936 	bltu	r3,r23,4c38 <___vfprintf_internal_r+0x144>
    4c14:	00bfffc4 	movi	r2,-1
    4c18:	90800426 	beq	r18,r2,4c2c <___vfprintf_internal_r+0x138>
    4c1c:	01400284 	movi	r5,10
    4c20:	9009883a 	mov	r4,r18
    4c24:	00049d80 	call	49d8 <__mulsi3>
    4c28:	00000106 	br	4c30 <___vfprintf_internal_r+0x13c>
    4c2c:	0005883a 	mov	r2,zero
    4c30:	b8a5883a 	add	r18,r23,r2
    4c34:	0000e206 	br	4fc0 <___vfprintf_internal_r+0x4cc>
    4c38:	01400b84 	movi	r5,46
    4c3c:	1140e426 	beq	r2,r5,4fd0 <___vfprintf_internal_r+0x4dc>
    4c40:	05c00084 	movi	r23,2
    4c44:	213ff404 	addi	r4,r4,-48
    4c48:	27003fcc 	andi	fp,r4,255
    4c4c:	00c00244 	movi	r3,9
    4c50:	1f000936 	bltu	r3,fp,4c78 <___vfprintf_internal_r+0x184>
    4c54:	00bfffc4 	movi	r2,-1
    4c58:	98800426 	beq	r19,r2,4c6c <___vfprintf_internal_r+0x178>
    4c5c:	01400284 	movi	r5,10
    4c60:	9809883a 	mov	r4,r19
    4c64:	00049d80 	call	49d8 <__mulsi3>
    4c68:	00000106 	br	4c70 <___vfprintf_internal_r+0x17c>
    4c6c:	0005883a 	mov	r2,zero
    4c70:	e0a7883a 	add	r19,fp,r2
    4c74:	0000d906 	br	4fdc <___vfprintf_internal_r+0x4e8>
    4c78:	00c01b04 	movi	r3,108
    4c7c:	10c0d226 	beq	r2,r3,4fc8 <___vfprintf_internal_r+0x4d4>
    4c80:	013fffc4 	movi	r4,-1
    4c84:	99000226 	beq	r19,r4,4c90 <___vfprintf_internal_r+0x19c>
    4c88:	d8000b15 	stw	zero,44(sp)
    4c8c:	00000106 	br	4c94 <___vfprintf_internal_r+0x1a0>
    4c90:	04c00044 	movi	r19,1
    4c94:	01001a44 	movi	r4,105
    4c98:	11001626 	beq	r2,r4,4cf4 <___vfprintf_internal_r+0x200>
    4c9c:	20800916 	blt	r4,r2,4cc4 <___vfprintf_internal_r+0x1d0>
    4ca0:	010018c4 	movi	r4,99
    4ca4:	11008826 	beq	r2,r4,4ec8 <___vfprintf_internal_r+0x3d4>
    4ca8:	01001904 	movi	r4,100
    4cac:	11001126 	beq	r2,r4,4cf4 <___vfprintf_internal_r+0x200>
    4cb0:	01001604 	movi	r4,88
    4cb4:	1100c81e 	bne	r2,r4,4fd8 <___vfprintf_internal_r+0x4e4>
    4cb8:	00c00044 	movi	r3,1
    4cbc:	d8c00e15 	stw	r3,56(sp)
    4cc0:	00001506 	br	4d18 <___vfprintf_internal_r+0x224>
    4cc4:	01001cc4 	movi	r4,115
    4cc8:	11009826 	beq	r2,r4,4f2c <___vfprintf_internal_r+0x438>
    4ccc:	20800416 	blt	r4,r2,4ce0 <___vfprintf_internal_r+0x1ec>
    4cd0:	01001bc4 	movi	r4,111
    4cd4:	1100c01e 	bne	r2,r4,4fd8 <___vfprintf_internal_r+0x4e4>
    4cd8:	05400204 	movi	r21,8
    4cdc:	00000f06 	br	4d1c <___vfprintf_internal_r+0x228>
    4ce0:	01001d44 	movi	r4,117
    4ce4:	11000d26 	beq	r2,r4,4d1c <___vfprintf_internal_r+0x228>
    4ce8:	01001e04 	movi	r4,120
    4cec:	11000a26 	beq	r2,r4,4d18 <___vfprintf_internal_r+0x224>
    4cf0:	0000b906 	br	4fd8 <___vfprintf_internal_r+0x4e4>
    4cf4:	d8c00a17 	ldw	r3,40(sp)
    4cf8:	b7000104 	addi	fp,r22,4
    4cfc:	18000726 	beq	r3,zero,4d1c <___vfprintf_internal_r+0x228>
    4d00:	df000d15 	stw	fp,52(sp)
    4d04:	b5c00017 	ldw	r23,0(r22)
    4d08:	b800080e 	bge	r23,zero,4d2c <___vfprintf_internal_r+0x238>
    4d0c:	05efc83a 	sub	r23,zero,r23
    4d10:	02400044 	movi	r9,1
    4d14:	00000606 	br	4d30 <___vfprintf_internal_r+0x23c>
    4d18:	05400404 	movi	r21,16
    4d1c:	b0c00104 	addi	r3,r22,4
    4d20:	d8c00d15 	stw	r3,52(sp)
    4d24:	b5c00017 	ldw	r23,0(r22)
    4d28:	d8000a15 	stw	zero,40(sp)
    4d2c:	0013883a 	mov	r9,zero
    4d30:	d839883a 	mov	fp,sp
    4d34:	b8001726 	beq	r23,zero,4d94 <___vfprintf_internal_r+0x2a0>
    4d38:	a80b883a 	mov	r5,r21
    4d3c:	b809883a 	mov	r4,r23
    4d40:	da401015 	stw	r9,64(sp)
    4d44:	000491c0 	call	491c <__udivsi3>
    4d48:	a80b883a 	mov	r5,r21
    4d4c:	1009883a 	mov	r4,r2
    4d50:	102d883a 	mov	r22,r2
    4d54:	00049d80 	call	49d8 <__mulsi3>
    4d58:	b885c83a 	sub	r2,r23,r2
    4d5c:	00c00244 	movi	r3,9
    4d60:	da401017 	ldw	r9,64(sp)
    4d64:	18800216 	blt	r3,r2,4d70 <___vfprintf_internal_r+0x27c>
    4d68:	10800c04 	addi	r2,r2,48
    4d6c:	00000506 	br	4d84 <___vfprintf_internal_r+0x290>
    4d70:	d8c00e17 	ldw	r3,56(sp)
    4d74:	18000226 	beq	r3,zero,4d80 <___vfprintf_internal_r+0x28c>
    4d78:	10800dc4 	addi	r2,r2,55
    4d7c:	00000106 	br	4d84 <___vfprintf_internal_r+0x290>
    4d80:	108015c4 	addi	r2,r2,87
    4d84:	e0800005 	stb	r2,0(fp)
    4d88:	b02f883a 	mov	r23,r22
    4d8c:	e7000044 	addi	fp,fp,1
    4d90:	003fe806 	br	4d34 <___vfprintf_internal_r+0x240>
    4d94:	e6efc83a 	sub	r23,fp,sp
    4d98:	9dc5c83a 	sub	r2,r19,r23
    4d9c:	0080090e 	bge	zero,r2,4dc4 <___vfprintf_internal_r+0x2d0>
    4da0:	e085883a 	add	r2,fp,r2
    4da4:	01400c04 	movi	r5,48
    4da8:	d8c00917 	ldw	r3,36(sp)
    4dac:	e009883a 	mov	r4,fp
    4db0:	e0c0032e 	bgeu	fp,r3,4dc0 <___vfprintf_internal_r+0x2cc>
    4db4:	e7000044 	addi	fp,fp,1
    4db8:	21400005 	stb	r5,0(r4)
    4dbc:	e0bffa1e 	bne	fp,r2,4da8 <___vfprintf_internal_r+0x2b4>
    4dc0:	e6efc83a 	sub	r23,fp,sp
    4dc4:	d8c00b17 	ldw	r3,44(sp)
    4dc8:	4dd1883a 	add	r8,r9,r23
    4dcc:	922dc83a 	sub	r22,r18,r8
    4dd0:	18001626 	beq	r3,zero,4e2c <___vfprintf_internal_r+0x338>
    4dd4:	48000a26 	beq	r9,zero,4e00 <___vfprintf_internal_r+0x30c>
    4dd8:	00800b44 	movi	r2,45
    4ddc:	d8800805 	stb	r2,32(sp)
    4de0:	88800117 	ldw	r2,4(r17)
    4de4:	01c00044 	movi	r7,1
    4de8:	d9800804 	addi	r6,sp,32
    4dec:	880b883a 	mov	r5,r17
    4df0:	a009883a 	mov	r4,r20
    4df4:	103ee83a 	callr	r2
    4df8:	10004a1e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4dfc:	84000044 	addi	r16,r16,1
    4e00:	0580070e 	bge	zero,r22,4e20 <___vfprintf_internal_r+0x32c>
    4e04:	b00f883a 	mov	r7,r22
    4e08:	01800c04 	movi	r6,48
    4e0c:	880b883a 	mov	r5,r17
    4e10:	a009883a 	mov	r4,r20
    4e14:	0004a880 	call	4a88 <print_repeat>
    4e18:	1000421e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4e1c:	85a1883a 	add	r16,r16,r22
    4e20:	e02d883a 	mov	r22,fp
    4e24:	bf2fc83a 	sub	r23,r23,fp
    4e28:	00002006 	br	4eac <___vfprintf_internal_r+0x3b8>
    4e2c:	0580090e 	bge	zero,r22,4e54 <___vfprintf_internal_r+0x360>
    4e30:	b00f883a 	mov	r7,r22
    4e34:	01800804 	movi	r6,32
    4e38:	880b883a 	mov	r5,r17
    4e3c:	a009883a 	mov	r4,r20
    4e40:	da401015 	stw	r9,64(sp)
    4e44:	0004a880 	call	4a88 <print_repeat>
    4e48:	da401017 	ldw	r9,64(sp)
    4e4c:	1000351e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4e50:	85a1883a 	add	r16,r16,r22
    4e54:	483ff226 	beq	r9,zero,4e20 <___vfprintf_internal_r+0x32c>
    4e58:	00800b44 	movi	r2,45
    4e5c:	d8800805 	stb	r2,32(sp)
    4e60:	88800117 	ldw	r2,4(r17)
    4e64:	01c00044 	movi	r7,1
    4e68:	d9800804 	addi	r6,sp,32
    4e6c:	880b883a 	mov	r5,r17
    4e70:	a009883a 	mov	r4,r20
    4e74:	103ee83a 	callr	r2
    4e78:	10002a1e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4e7c:	84000044 	addi	r16,r16,1
    4e80:	003fe706 	br	4e20 <___vfprintf_internal_r+0x32c>
    4e84:	b5bfffc4 	addi	r22,r22,-1
    4e88:	b0800003 	ldbu	r2,0(r22)
    4e8c:	01c00044 	movi	r7,1
    4e90:	d9800804 	addi	r6,sp,32
    4e94:	d8800805 	stb	r2,32(sp)
    4e98:	88800117 	ldw	r2,4(r17)
    4e9c:	880b883a 	mov	r5,r17
    4ea0:	a009883a 	mov	r4,r20
    4ea4:	103ee83a 	callr	r2
    4ea8:	10001e1e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4eac:	8585c83a 	sub	r2,r16,r22
    4eb0:	b5c9883a 	add	r4,r22,r23
    4eb4:	e085883a 	add	r2,fp,r2
    4eb8:	013ff216 	blt	zero,r4,4e84 <___vfprintf_internal_r+0x390>
    4ebc:	1021883a 	mov	r16,r2
    4ec0:	dd800d17 	ldw	r22,52(sp)
    4ec4:	00004406 	br	4fd8 <___vfprintf_internal_r+0x4e4>
    4ec8:	00800044 	movi	r2,1
    4ecc:	1480080e 	bge	r2,r18,4ef0 <___vfprintf_internal_r+0x3fc>
    4ed0:	95ffffc4 	addi	r23,r18,-1
    4ed4:	b80f883a 	mov	r7,r23
    4ed8:	01800804 	movi	r6,32
    4edc:	880b883a 	mov	r5,r17
    4ee0:	a009883a 	mov	r4,r20
    4ee4:	0004a880 	call	4a88 <print_repeat>
    4ee8:	10000e1e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4eec:	85e1883a 	add	r16,r16,r23
    4ef0:	b0800017 	ldw	r2,0(r22)
    4ef4:	01c00044 	movi	r7,1
    4ef8:	d80d883a 	mov	r6,sp
    4efc:	d8800005 	stb	r2,0(sp)
    4f00:	88800117 	ldw	r2,4(r17)
    4f04:	880b883a 	mov	r5,r17
    4f08:	a009883a 	mov	r4,r20
    4f0c:	b5c00104 	addi	r23,r22,4
    4f10:	103ee83a 	callr	r2
    4f14:	1000031e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4f18:	84000044 	addi	r16,r16,1
    4f1c:	b82d883a 	mov	r22,r23
    4f20:	00002d06 	br	4fd8 <___vfprintf_internal_r+0x4e4>
    4f24:	00bfffc4 	movi	r2,-1
    4f28:	00003106 	br	4ff0 <___vfprintf_internal_r+0x4fc>
    4f2c:	b5c00017 	ldw	r23,0(r22)
    4f30:	b7000104 	addi	fp,r22,4
    4f34:	b809883a 	mov	r4,r23
    4f38:	00050f40 	call	50f4 <strlen>
    4f3c:	9091c83a 	sub	r8,r18,r2
    4f40:	102d883a 	mov	r22,r2
    4f44:	0200090e 	bge	zero,r8,4f6c <___vfprintf_internal_r+0x478>
    4f48:	400f883a 	mov	r7,r8
    4f4c:	01800804 	movi	r6,32
    4f50:	880b883a 	mov	r5,r17
    4f54:	a009883a 	mov	r4,r20
    4f58:	da001015 	stw	r8,64(sp)
    4f5c:	0004a880 	call	4a88 <print_repeat>
    4f60:	da001017 	ldw	r8,64(sp)
    4f64:	103fef1e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4f68:	8221883a 	add	r16,r16,r8
    4f6c:	88800117 	ldw	r2,4(r17)
    4f70:	b00f883a 	mov	r7,r22
    4f74:	b80d883a 	mov	r6,r23
    4f78:	880b883a 	mov	r5,r17
    4f7c:	a009883a 	mov	r4,r20
    4f80:	103ee83a 	callr	r2
    4f84:	103fe71e 	bne	r2,zero,4f24 <___vfprintf_internal_r+0x430>
    4f88:	85a1883a 	add	r16,r16,r22
    4f8c:	e02d883a 	mov	r22,fp
    4f90:	00001106 	br	4fd8 <___vfprintf_internal_r+0x4e4>
    4f94:	00c00044 	movi	r3,1
    4f98:	04ffffc4 	movi	r19,-1
    4f9c:	d8000e15 	stw	zero,56(sp)
    4fa0:	d8c00a15 	stw	r3,40(sp)
    4fa4:	05400284 	movi	r21,10
    4fa8:	9825883a 	mov	r18,r19
    4fac:	d8000c15 	stw	zero,48(sp)
    4fb0:	d8000b15 	stw	zero,44(sp)
    4fb4:	182f883a 	mov	r23,r3
    4fb8:	00000806 	br	4fdc <___vfprintf_internal_r+0x4e8>
    4fbc:	ddc00b15 	stw	r23,44(sp)
    4fc0:	05c00084 	movi	r23,2
    4fc4:	00000506 	br	4fdc <___vfprintf_internal_r+0x4e8>
    4fc8:	00c00044 	movi	r3,1
    4fcc:	d8c00c15 	stw	r3,48(sp)
    4fd0:	05c000c4 	movi	r23,3
    4fd4:	00000106 	br	4fdc <___vfprintf_internal_r+0x4e8>
    4fd8:	002f883a 	mov	r23,zero
    4fdc:	d8c00f17 	ldw	r3,60(sp)
    4fe0:	18c00044 	addi	r3,r3,1
    4fe4:	d8c00f15 	stw	r3,60(sp)
    4fe8:	003edc06 	br	4b5c <___vfprintf_internal_r+0x68>
    4fec:	8005883a 	mov	r2,r16
    4ff0:	dfc01a17 	ldw	ra,104(sp)
    4ff4:	df001917 	ldw	fp,100(sp)
    4ff8:	ddc01817 	ldw	r23,96(sp)
    4ffc:	dd801717 	ldw	r22,92(sp)
    5000:	dd401617 	ldw	r21,88(sp)
    5004:	dd001517 	ldw	r20,84(sp)
    5008:	dcc01417 	ldw	r19,80(sp)
    500c:	dc801317 	ldw	r18,76(sp)
    5010:	dc401217 	ldw	r17,72(sp)
    5014:	dc001117 	ldw	r16,68(sp)
    5018:	dec01b04 	addi	sp,sp,108
    501c:	f800283a 	ret

00005020 <__vfprintf_internal>:
    5020:	00800034 	movhi	r2,0
    5024:	10958d04 	addi	r2,r2,22068
    5028:	300f883a 	mov	r7,r6
    502c:	280d883a 	mov	r6,r5
    5030:	200b883a 	mov	r5,r4
    5034:	11000017 	ldw	r4,0(r2)
    5038:	0004af41 	jmpi	4af4 <___vfprintf_internal_r>

0000503c <__sfvwrite_small_dev>:
    503c:	2880000b 	ldhu	r2,0(r5)
    5040:	1080020c 	andi	r2,r2,8
    5044:	10002126 	beq	r2,zero,50cc <__sfvwrite_small_dev+0x90>
    5048:	2880008f 	ldh	r2,2(r5)
    504c:	defffa04 	addi	sp,sp,-24
    5050:	dc000015 	stw	r16,0(sp)
    5054:	dfc00515 	stw	ra,20(sp)
    5058:	dd000415 	stw	r20,16(sp)
    505c:	dcc00315 	stw	r19,12(sp)
    5060:	dc800215 	stw	r18,8(sp)
    5064:	dc400115 	stw	r17,4(sp)
    5068:	2821883a 	mov	r16,r5
    506c:	10001216 	blt	r2,zero,50b8 <__sfvwrite_small_dev+0x7c>
    5070:	2027883a 	mov	r19,r4
    5074:	3025883a 	mov	r18,r6
    5078:	3823883a 	mov	r17,r7
    507c:	05010004 	movi	r20,1024
    5080:	04400b0e 	bge	zero,r17,50b0 <__sfvwrite_small_dev+0x74>
    5084:	880f883a 	mov	r7,r17
    5088:	a440010e 	bge	r20,r17,5090 <__sfvwrite_small_dev+0x54>
    508c:	01c10004 	movi	r7,1024
    5090:	8140008f 	ldh	r5,2(r16)
    5094:	900d883a 	mov	r6,r18
    5098:	9809883a 	mov	r4,r19
    509c:	00051100 	call	5110 <_write_r>
    50a0:	0080050e 	bge	zero,r2,50b8 <__sfvwrite_small_dev+0x7c>
    50a4:	88a3c83a 	sub	r17,r17,r2
    50a8:	90a5883a 	add	r18,r18,r2
    50ac:	003ff406 	br	5080 <__sfvwrite_small_dev+0x44>
    50b0:	0005883a 	mov	r2,zero
    50b4:	00000706 	br	50d4 <__sfvwrite_small_dev+0x98>
    50b8:	8080000b 	ldhu	r2,0(r16)
    50bc:	10801014 	ori	r2,r2,64
    50c0:	8080000d 	sth	r2,0(r16)
    50c4:	00bfffc4 	movi	r2,-1
    50c8:	00000206 	br	50d4 <__sfvwrite_small_dev+0x98>
    50cc:	00bfffc4 	movi	r2,-1
    50d0:	f800283a 	ret
    50d4:	dfc00517 	ldw	ra,20(sp)
    50d8:	dd000417 	ldw	r20,16(sp)
    50dc:	dcc00317 	ldw	r19,12(sp)
    50e0:	dc800217 	ldw	r18,8(sp)
    50e4:	dc400117 	ldw	r17,4(sp)
    50e8:	dc000017 	ldw	r16,0(sp)
    50ec:	dec00604 	addi	sp,sp,24
    50f0:	f800283a 	ret

000050f4 <strlen>:
    50f4:	2005883a 	mov	r2,r4
    50f8:	10c00007 	ldb	r3,0(r2)
    50fc:	18000226 	beq	r3,zero,5108 <strlen+0x14>
    5100:	10800044 	addi	r2,r2,1
    5104:	003ffc06 	br	50f8 <strlen+0x4>
    5108:	1105c83a 	sub	r2,r2,r4
    510c:	f800283a 	ret

00005110 <_write_r>:
    5110:	defffd04 	addi	sp,sp,-12
    5114:	dc000015 	stw	r16,0(sp)
    5118:	04000034 	movhi	r16,0
    511c:	dc400115 	stw	r17,4(sp)
    5120:	8415e104 	addi	r16,r16,22404
    5124:	2023883a 	mov	r17,r4
    5128:	2809883a 	mov	r4,r5
    512c:	300b883a 	mov	r5,r6
    5130:	380d883a 	mov	r6,r7
    5134:	dfc00215 	stw	ra,8(sp)
    5138:	80000015 	stw	zero,0(r16)
    513c:	00053440 	call	5344 <write>
    5140:	00ffffc4 	movi	r3,-1
    5144:	10c0031e 	bne	r2,r3,5154 <_write_r+0x44>
    5148:	80c00017 	ldw	r3,0(r16)
    514c:	18000126 	beq	r3,zero,5154 <_write_r+0x44>
    5150:	88c00015 	stw	r3,0(r17)
    5154:	dfc00217 	ldw	ra,8(sp)
    5158:	dc400117 	ldw	r17,4(sp)
    515c:	dc000017 	ldw	r16,0(sp)
    5160:	dec00304 	addi	sp,sp,12
    5164:	f800283a 	ret

00005168 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5168:	008007c4 	movi	r2,31
    516c:	11002136 	bltu	r2,r4,51f4 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5170:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5174:	00ffff84 	movi	r3,-2
    5178:	38c4703a 	and	r2,r7,r3
    517c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    5180:	200490fa 	slli	r2,r4,3
    5184:	02000034 	movhi	r8,0
    5188:	4215e704 	addi	r8,r8,22428
    518c:	4085883a 	add	r2,r8,r2
    5190:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    5194:	11400115 	stw	r5,4(r2)
    5198:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    519c:	30000726 	beq	r6,zero,51bc <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51a0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51a4:	28c6703a 	and	r3,r5,r3
    51a8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    51ac:	d0e05f17 	ldw	r3,-32388(gp)
    51b0:	1104983a 	sll	r2,r2,r4
    51b4:	10c4b03a 	or	r2,r2,r3
    51b8:	00000706 	br	51d8 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51bc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51c0:	28c6703a 	and	r3,r5,r3
    51c4:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    51c8:	1104983a 	sll	r2,r2,r4
    51cc:	d0e05f17 	ldw	r3,-32388(gp)
    51d0:	0084303a 	nor	r2,zero,r2
    51d4:	10c4703a 	and	r2,r2,r3
    51d8:	d0a05f15 	stw	r2,-32388(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    51dc:	d0a05f17 	ldw	r2,-32388(gp)
    51e0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    51e4:	2801703a 	wrctl	status,r5
    51e8:	3801703a 	wrctl	status,r7
    51ec:	0005883a 	mov	r2,zero
    51f0:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    51f4:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    51f8:	f800283a 	ret

000051fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    51fc:	deffff04 	addi	sp,sp,-4
    5200:	01000034 	movhi	r4,0
    5204:	01400034 	movhi	r5,0
    5208:	dfc00015 	stw	ra,0(sp)
    520c:	21154b04 	addi	r4,r4,21804
    5210:	29559104 	addi	r5,r5,22084

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5214:	2140061e 	bne	r4,r5,5230 <alt_load+0x34>
    5218:	01000034 	movhi	r4,0
    521c:	01400034 	movhi	r5,0
    5220:	21100804 	addi	r4,r4,16416
    5224:	29500804 	addi	r5,r5,16416
    5228:	2140121e 	bne	r4,r5,5274 <alt_load+0x78>
    522c:	00000b06 	br	525c <alt_load+0x60>
    5230:	00c00034 	movhi	r3,0
    5234:	18d59104 	addi	r3,r3,22084
    5238:	1907c83a 	sub	r3,r3,r4
    523c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5240:	10fff526 	beq	r2,r3,5218 <alt_load+0x1c>
    {
      *to++ = *from++;
    5244:	114f883a 	add	r7,r2,r5
    5248:	39c00017 	ldw	r7,0(r7)
    524c:	110d883a 	add	r6,r2,r4
    5250:	10800104 	addi	r2,r2,4
    5254:	31c00015 	stw	r7,0(r6)
    5258:	003ff906 	br	5240 <alt_load+0x44>
    525c:	01000034 	movhi	r4,0
    5260:	01400034 	movhi	r5,0
    5264:	21154204 	addi	r4,r4,21768
    5268:	29554204 	addi	r5,r5,21768

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    526c:	2140101e 	bne	r4,r5,52b0 <alt_load+0xb4>
    5270:	00000b06 	br	52a0 <alt_load+0xa4>
    5274:	00c00034 	movhi	r3,0
    5278:	18d06004 	addi	r3,r3,16768
    527c:	1907c83a 	sub	r3,r3,r4
    5280:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5284:	10fff526 	beq	r2,r3,525c <alt_load+0x60>
    {
      *to++ = *from++;
    5288:	114f883a 	add	r7,r2,r5
    528c:	39c00017 	ldw	r7,0(r7)
    5290:	110d883a 	add	r6,r2,r4
    5294:	10800104 	addi	r2,r2,4
    5298:	31c00015 	stw	r7,0(r6)
    529c:	003ff906 	br	5284 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    52a0:	00054840 	call	5484 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    52a4:	dfc00017 	ldw	ra,0(sp)
    52a8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    52ac:	00054881 	jmpi	5488 <alt_icache_flush_all>
    52b0:	00c00034 	movhi	r3,0
    52b4:	18d54b04 	addi	r3,r3,21804
    52b8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    52bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    52c0:	18bff726 	beq	r3,r2,52a0 <alt_load+0xa4>
    {
      *to++ = *from++;
    52c4:	114f883a 	add	r7,r2,r5
    52c8:	39c00017 	ldw	r7,0(r7)
    52cc:	110d883a 	add	r6,r2,r4
    52d0:	10800104 	addi	r2,r2,4
    52d4:	31c00015 	stw	r7,0(r6)
    52d8:	003ff906 	br	52c0 <alt_load+0xc4>

000052dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    52dc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    52e0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    52e4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    52e8:	00053a40 	call	53a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    52ec:	00053c40 	call	53c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    52f0:	d1a06017 	ldw	r6,-32384(gp)
    52f4:	d1606117 	ldw	r5,-32380(gp)
    52f8:	d1206217 	ldw	r4,-32376(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    52fc:	dfc00017 	ldw	ra,0(sp)
    5300:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5304:	00047ec1 	jmpi	47ec <main>

00005308 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    5308:	defffe04 	addi	sp,sp,-8
    530c:	dc000015 	stw	r16,0(sp)
    5310:	dfc00115 	stw	ra,4(sp)
    5314:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5318:	00050f40 	call	50f4 <strlen>
    531c:	01000034 	movhi	r4,0
    5320:	000f883a 	mov	r7,zero
    5324:	100d883a 	mov	r6,r2
    5328:	800b883a 	mov	r5,r16
    532c:	21158f04 	addi	r4,r4,22076
#else
    return fputs(str, stdout);
#endif
#endif
}
    5330:	dfc00117 	ldw	ra,4(sp)
    5334:	dc000017 	ldw	r16,0(sp)
    5338:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    533c:	00053c81 	jmpi	53c8 <altera_avalon_jtag_uart_write>

00005340 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    5340:	00053fc1 	jmpi	53fc <alt_busy_sleep>

00005344 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5344:	00800044 	movi	r2,1
    5348:	20800226 	beq	r4,r2,5354 <write+0x10>
    534c:	00800084 	movi	r2,2
    5350:	2080041e 	bne	r4,r2,5364 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5354:	01000034 	movhi	r4,0
    5358:	000f883a 	mov	r7,zero
    535c:	21158f04 	addi	r4,r4,22076
    5360:	00053c81 	jmpi	53c8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5364:	d0a00d17 	ldw	r2,-32716(gp)
    5368:	10000926 	beq	r2,zero,5390 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    536c:	deffff04 	addi	sp,sp,-4
    5370:	dfc00015 	stw	ra,0(sp)
    5374:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5378:	00c01444 	movi	r3,81
    537c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5380:	00bfffc4 	movi	r2,-1
    5384:	dfc00017 	ldw	ra,0(sp)
    5388:	dec00104 	addi	sp,sp,4
    538c:	f800283a 	ret
    5390:	d0a05e04 	addi	r2,gp,-32392
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5394:	00c01444 	movi	r3,81
    5398:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    539c:	00bfffc4 	movi	r2,-1
    53a0:	f800283a 	ret

000053a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    53a4:	deffff04 	addi	sp,sp,-4
    53a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    53ac:	000548c0 	call	548c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    53b0:	00800044 	movi	r2,1
    53b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    53b8:	dfc00017 	ldw	ra,0(sp)
    53bc:	dec00104 	addi	sp,sp,4
    53c0:	f800283a 	ret

000053c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    53c4:	f800283a 	ret

000053c8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    53c8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    53cc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    53d0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    53d4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    53d8:	2980072e 	bgeu	r5,r6,53f8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    53dc:	38c00037 	ldwio	r3,0(r7)
    53e0:	18ffffec 	andhi	r3,r3,65535
    53e4:	183ffc26 	beq	r3,zero,53d8 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    53e8:	28c00007 	ldb	r3,0(r5)
    53ec:	20c00035 	stwio	r3,0(r4)
    53f0:	29400044 	addi	r5,r5,1
    53f4:	003ff806 	br	53d8 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    53f8:	f800283a 	ret

000053fc <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    53fc:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    5400:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    5404:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    5408:	dc000015 	stw	r16,0(sp)
    540c:	dfc00115 	stw	ra,4(sp)
    5410:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    5414:	000491c0 	call	491c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    5418:	10001026 	beq	r2,zero,545c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    541c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5420:	013999b4 	movhi	r4,58982
    5424:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5428:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    542c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5430:	297fffc4 	addi	r5,r5,-1
    5434:	283ffe1e 	bne	r5,zero,5430 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5438:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    543c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5440:	18bffb16 	blt	r3,r2,5430 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    5444:	01400144 	movi	r5,5
    5448:	8009883a 	mov	r4,r16
    544c:	00049d80 	call	49d8 <__mulsi3>
    5450:	10bfffc4 	addi	r2,r2,-1
    5454:	103ffe1e 	bne	r2,zero,5450 <alt_busy_sleep+0x54>
    5458:	00000506 	br	5470 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    545c:	01400144 	movi	r5,5
    5460:	8009883a 	mov	r4,r16
    5464:	00049d80 	call	49d8 <__mulsi3>
    5468:	10bfffc4 	addi	r2,r2,-1
    546c:	00bffe16 	blt	zero,r2,5468 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    5470:	0005883a 	mov	r2,zero
    5474:	dfc00117 	ldw	ra,4(sp)
    5478:	dc000017 	ldw	r16,0(sp)
    547c:	dec00204 	addi	sp,sp,8
    5480:	f800283a 	ret

00005484 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5484:	f800283a 	ret

00005488 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5488:	f800283a 	ret

0000548c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    548c:	000170fa 	wrctl	ienable,zero
    5490:	f800283a 	ret

00005494 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    5494:	213ffe84 	addi	r4,r4,-6
    5498:	008003c4 	movi	r2,15
    549c:	11001636 	bltu	r2,r4,54f8 <alt_exception_cause_generated_bad_addr+0x64>
    54a0:	200890ba 	slli	r4,r4,2
    54a4:	00800034 	movhi	r2,0
    54a8:	10952e04 	addi	r2,r2,21688
    54ac:	2089883a 	add	r4,r4,r2
    54b0:	20800017 	ldw	r2,0(r4)
    54b4:	1000683a 	jmp	r2
    54b8:	00005500 	call	550 <__alt_mem_onchip_memory2_0-0x3ab0>
    54bc:	00005500 	call	550 <__alt_mem_onchip_memory2_0-0x3ab0>
    54c0:	000054f8 	rdprs	zero,zero,339
    54c4:	000054f8 	rdprs	zero,zero,339
    54c8:	000054f8 	rdprs	zero,zero,339
    54cc:	00005500 	call	550 <__alt_mem_onchip_memory2_0-0x3ab0>
    54d0:	000054f8 	rdprs	zero,zero,339
    54d4:	000054f8 	rdprs	zero,zero,339
    54d8:	00005500 	call	550 <__alt_mem_onchip_memory2_0-0x3ab0>
    54dc:	00005500 	call	550 <__alt_mem_onchip_memory2_0-0x3ab0>
    54e0:	000054f8 	rdprs	zero,zero,339
    54e4:	00005500 	call	550 <__alt_mem_onchip_memory2_0-0x3ab0>
    54e8:	000054f8 	rdprs	zero,zero,339
    54ec:	000054f8 	rdprs	zero,zero,339
    54f0:	000054f8 	rdprs	zero,zero,339
    54f4:	00005500 	call	550 <__alt_mem_onchip_memory2_0-0x3ab0>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    54f8:	0005883a 	mov	r2,zero
    54fc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5500:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    5504:	f800283a 	ret
